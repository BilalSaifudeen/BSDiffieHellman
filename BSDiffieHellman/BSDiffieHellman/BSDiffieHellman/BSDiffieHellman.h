//
//  BSDiffieHellman.h
//  BSDiffieHellman
//
//  Created by Bilal Saifudeen on 15/12/15.
//  Copyright Â© 2015 Bilal Saifudeen. All rights reserved.
//

#import <Foundation/Foundation.h>

//#define kFTDHPrimeLength 512


@interface BSDiffieHellman : NSObject
/**
 *  The prime number p in Diffie Hellmann
 */
@property (nonatomic, readonly) NSString *primeNumber;

/**
 *  The generator g in Diffie Hellman
 */
@property (nonatomic, readonly) NSString *generator;

/**
 *  The public key from the generated key-pair
 */
@property (nonatomic, readonly) NSData *publicKey;

/**
 *  The private key from the generated key-pair
 */
@property (nonatomic, readonly) NSData *privateKey;


#pragma mark - methods

/**
 *  Initialize with length to generate Prime number
 *
 *  @discussion Higher the primeLength, higher the unbreakability
 *              For Banking/military applications, 2048 or more would be safe
 *
 *  primeLength The length of the prime number to be generated. Ex: 512, 1024
 */
- (instancetype)initWithPrimeLength:(int)primeLength;

/**
 *  Designated Initializer
 *
 *  @param prime     The prime number
 *  @param generator The generator
 *
 *  @return A new instance
 */
- (instancetype)initWithPrime:(NSString *)prime andGenerator:(NSString *)generator;

/**
 *  Initializes DH(openssl) instance
 */
- (void)initialize;

/**
 *  Frees DH instance
 */
- (void)dispose;

/**
 *  Initializes the prime and generator using Diffie Hellman
 *  The length of the prime should be defined in 'kFTDHPrimeLength'
 *
 *  @see setPrime:andGenerator:
 *
 */
- (void)initializePG;

/**
 *  Sets the prime number and Generator
 *  Assertior failure will happen if the values are invalid from DH_check() call
 *
 *  @code
 BOOL valid = (DH_check() == 1);
 *  @endcode
 *
 *  @param prime     The prime number
 *  @param generator The generator
 */
- (void)setPrime:(NSString *)prime andGenerator:(NSString *)generator;

/**
 *  Validates the Prime and Generator and generates the Public/Private key pair
 *
 *  @return Return the status of key generation
 */
- (BOOL)generateKeyPairs;

/**
 *  Computes the Secret key with public key of the other party. Ex: server public key
 *  Other party can also generate this same key using our public key
 *
 *  @param otherPartyKey Other party public key
 *  @param error         Reports the error
 *
 *  @return The shared secret key generated by Diffie Hellman method
 */

- (NSData *)computeSharedSecretKeyWithOtherPartyPublicKey:(NSData *)otherPartyKey error:(NSError **)error;

@end
